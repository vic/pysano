# Grammar for Python

# Note:  Changing the grammar specified in this file will most likely
#        require corresponding changes in the parser module
#        (../Modules/parsermodule.c).  If you can't make the changes to
#        that module yourself, please co-ordinate the required changes
#        with someone who can; ask around on python-dev for help.  Fred
#        Drake <fdrake@acm.org> will probably be listening there.

# NOTE WELL: You should also follow all the steps listed at
# https://docs.python.org/devguide/grammar.html

# Start symbols for the grammar:
#       single_input is a single interactive statement;
#       file_input is a module or sequence of commands read from an input file;
#       eval_input is the input for the eval() functions.
# NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: NEWLINE | simple_stmt | compound_stmt NEWLINE
file_input: (NEWLINE | stmt)* ENDMARKER
eval_input: testlist NEWLINE* ENDMARKER

decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
decorators: decorator+
decorated: decorators (classdef | funcdef | async_funcdef)

async_funcdef: ASYNC funcdef
funcdef: pynata_def NAME parameters ['->' test] ':' suite

parameters: '(' [typedargslist] ')'
typedargslist: (tfpdef ['=' test] (',' tfpdef ['=' test])* [',' [
        '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]
      | '**' tfpdef [',']]]
  | '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]
  | '**' tfpdef [','])
tfpdef: NAME [':' test]
varargslist: (vfpdef ['=' test] (',' vfpdef ['=' test])* [',' [
        '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
      | '**' vfpdef [',']]]
  | '*' [vfpdef] (',' vfpdef ['=' test])* [',' ['**' vfpdef [',']]]
  | '**' vfpdef [',']
)
vfpdef: NAME

stmt: simple_stmt | compound_stmt
simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |
             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)
expr_stmt: testlist_star_expr (augassign (yield_expr|testlist) |
                     ('=' (yield_expr|testlist_star_expr))*)
testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']
augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |
            '<<=' | '>>=' | '**=' | '//=')
# For normal assignments, additional restrictions enforced by the interpreter
del_stmt: pynata_del exprlist
pass_stmt: pynata_pass
flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt
break_stmt: pynata_break
continue_stmt: pynata_continue
return_stmt: pynata_return [testlist]
yield_stmt: yield_expr
raise_stmt: pynata_raise [test [pynata_from test]]
import_stmt: import_name | import_from
import_name: pynata_import dotted_as_names
# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
import_from: (pynata_from (('.' | '...')* dotted_name | ('.' | '...')+)
              pynata_import ('*' | '(' import_as_names ')' | import_as_names))
import_as_name: NAME [pynata_as NAME]
dotted_as_name: dotted_name [pynata_as NAME]
import_as_names: import_as_name (',' import_as_name)* [',']
dotted_as_names: dotted_as_name (',' dotted_as_name)*
dotted_name: NAME ('.' NAME)*
global_stmt: pynata_global NAME (',' NAME)*
nonlocal_stmt: pynata_nonlocal NAME (',' NAME)*
assert_stmt: pynata_assert test [',' test]

compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | funcdef | classdef | decorated | async_stmt
async_stmt: ASYNC (funcdef | with_stmt | for_stmt)
if_stmt: pynata_if test ':' suite (
           'elif'
           test ':' suite)* [
           'else'
           ':' suite]
while_stmt: pynata_while test ':' suite [
           pynata_else
           ':' suite]
for_stmt: pynata_for exprlist pynata_in testlist ':' suite [
           'else'
           ':' suite]
try_stmt: (
          pynata_try
          ':' suite
           ((except_clause ':' suite)+
            [

            'else'
            ':' suite]
            [

            'finally'

            ':' suite] |

           'finally'

           ':' suite))

with_stmt: pynata_with with_item (',' with_item)*  ':' suite
with_item: test [pynata_as expr]
# NB compile.c makes sure that the default except clause is last
except_clause: pynata_except [test [pynata_as NAME]]
suite: simple_stmt | NEWLINE INDENT stmt+ DEDENT

test: or_test [pynata_if or_test pynata_else test] | lambdef
test_nocond: or_test | lambdef_nocond
lambdef: pynata_lambda [varargslist] ':' test
lambdef_nocond: pynata_lambda [varargslist] ':' test_nocond
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
# <> isn't actually a valid comparison operator in Python. It's here for the
# sake of a __future__ import described in PEP 401 (which really works :-)
comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!=' | \
    'in' |'not' 'in'| 'is' |'is' 'not'
star_expr: '*' expr
expr: xor_expr ('|' xor_expr)*
xor_expr: and_expr ('^' and_expr)*
and_expr: shift_expr ('&' shift_expr)*
shift_expr: arith_expr (('<<'|'>>') arith_expr)*
arith_expr: term (('+'|'-') term)*
term: factor (('*'|'@'|'/'|'%'|'//') factor)*
factor: ('+'|'-'|'~') factor | power
power: atom_expr ['**' factor]
atom_expr: [AWAIT] atom trailer*
atom: ('(' [yield_expr|testlist_comp] ')' |
       '[' [testlist_comp] ']' |
       '{' [dictorsetmaker] '}' |
       NAME | NUMBER | STRING+ | '...' |
       'None' | 'True' | 'False')
testlist_comp: (test|star_expr) ( comp_for | (',' (test|star_expr))* [','] )
trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
subscriptlist: subscript (',' subscript)* [',']
subscript: test | [test] ':' [test] [sliceop]
sliceop: ':' [test]
exprlist: (expr|star_expr) (',' (expr|star_expr))* [',']
testlist: test (',' test)* [',']
dictorsetmaker: ( ((test ':' test | '**' expr)
                   (comp_for | (',' (test ':' test | '**' expr))* [','])) |
                  ((test | star_expr)
                   (comp_for | (',' (test | star_expr))* [','])) )

classdef: pynata_class NAME ['(' [arglist] ')'] ':' suite

arglist: argument (',' argument)*  [',']

# The reason that keywords are test nodes instead of NAME is that using NAME
# results in an ambiguity. ast.c makes sure it's a NAME.
# "test '=' test" is really "keyword '=' test", but we have no such token.
# These need to be in a single rule to avoid grammar that is ambiguous
# to our LL(1) parser. Even though 'test' includes '*expr' in star_expr,
# we explicitly match '*' here, too, to give it proper precedence.
# Illegal combinations and orderings are blocked in ast.c:
# multiple (test comp_for) arguements are blocked; keyword unpackings
# that precede iterable unpackings are blocked; etc.
argument: ( test [comp_for] |
            test '=' test |
            '**' test |
            '*' test )

comp_iter: comp_for | comp_if
comp_for: pynata_for exprlist 'in' or_test [comp_iter]
comp_if: pynata_if test_nocond [comp_iter]

# not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME

yield_expr: pynata_yield [yield_arg]
yield_arg: pynata_from test | testlist


### PYNATA ####
pynata_def: 'def'
pynata_pass: 'pass' | 'pasa'
pynata_class: 'class' | 'clase'
pynata_for: 'for' | 'por'
pynata_break: 'break' | 'rompe'
pynata_continue: 'continue' | 'continua'
pynata_return: 'return' | 'regresa'
pynata_del: 'del' | 'borra'
pynata_raise: 'raise' | 'lanza'
pynata_global: 'global'
pynata_nonlocal: 'nonlocal' | 'nolocal'
pynata_assert: 'assert' | 'asevera'
pynata_with: 'with' | 'usando'
pynata_except: 'except' | 'excepto'
pynata_lambda: 'lambda'
pynata_yield: 'yield' | 'genera'
pynata_while: 'while' | 'mientras'
pynata_import: 'import' | 'importa'
pynata_from: 'from' | 'desde'
pynata_if: 'if' | 'si'
pynata_as: 'as' | 'como'
pynata_try: 'try' | 'intenta'
pynata_or: 'or' | 'o'
pynata_else: 'else' | 'sino'
pynata_in: 'in' | 'en'